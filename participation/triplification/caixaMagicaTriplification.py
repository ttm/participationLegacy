import percolation as P
import pymysql, datetime, os, shutil
def triplificaCaixaMagica(dbname,username,passwd,fpath=".",scriptpath=".",fname="CMData",donated_by="Caixa Mágica Users"):
    aname="caixamagica"
    tg=P.rdf.makeBasicGraph([["po","cm"],[P.rdf.ns.po,P.rdf.ns.cm]],"Caixa mágica data triplification metadata")
    tg2=P.rdf.makeBasicGraph([["po","cm"],[P.rdf.ns.po,P.rdf.ns.cm]],"Caixa mágica data triplification")
    ind=P.rdf.IC([tg2],P.rdf.ns.po.Snapshot,
        aname,"Snapshot {}".format(aname))
    created_at=datetime.datetime.now()
    P.rdf.link([tg2],ind,"Snapshot {}".format(aname),
                          [P.rdf.ns.po.createdAt,
                          P.rdf.ns.po.triplifiedIn,
                          P.rdf.ns.po.donatedBy,
                          P.rdf.ns.po.availableAt,
                          P.rdf.ns.po.originalFile,
                          P.rdf.ns.po.rdfFile,
                          P.rdf.ns.po.ttlFile,
                          P.rdf.ns.po.discoveryRDFFile,
                          P.rdf.ns.po.discoveryTTLFile,
                          P.rdf.ns.po.acquiredThrough,
                          P.rdf.ns.rdfs.comment,
                          ],
                          [created_at,
                           datetime.datetime.now(),
                           donated_by,
                           "https://github.com/ttm/{}".format(aname),
                           "https://raw.githubusercontent.com/ttm/{}/master/base/{}".format(aname,fname.split("/")[-1]),
                           "https://raw.githubusercontent.com/ttm/{}/master/rdf/{}Translate.owl".format(aname,aname),
                           "https://raw.githubusercontent.com/ttm/{}/master/rdf/{}Translate.ttl".format(aname,aname),
                                "https://raw.githubusercontent.com/ttm/{}/master/rdf/{}Meta.owl".format(aname,aname),
                                "https://raw.githubusercontent.com/ttm/{}/master/rdf/{}Meta.ttl".format(aname,aname),
                           "Database dump",
                                "A linked data expression of the data generated by caixa mágica",
                           ])
    conn = pymysql.connect(user=username, passwd=passwd, db=dbname) # cm2
    cur = conn.cursor()
    cur.execute("SELECT * FROM transacoes_caixamagica")
    trans=[i for i in cur]

    cur.execute("DESCRIBE transacoes_caixamagica")
    cols=[i[0] for i in cur]
    for tr in trans:
        tid=tr[0]
        tid_=str(tid)
#        if tr[-2]: # dont mind
#            ind=P.rdf.IC([tg],P.rdf.ns.cm.DontMind,tid)
#            if tr[2] == 3:
#                tid2=tr[20] # TTM
#                ind2=P.rdf.IC([tg],P.rdf.ns.cm.Solution,tid2)
#                P.rdf.link_([tg],imsg,msg,[P.rdf.ns.cm.problem],[ind2])
        if tr[2]==1: # problema
            ind=P.rdf.IC([tg],P.rdf.ns.cm.Problem,tid)
            if tr[3] in ("A","a"): # não tenho
                uris2=[P.rdf.ns.cm.DontHave]
            if tr[3] in ("B","b"): # não existe
                uris2=[P.rdf.ns.cm.DontExist]
            if tr[3] in ("C","c"): # não gosto
                uris2=[P.rdf.ns.cm.DontLike]
            P.rdf.link_([tg],ind,tid_,[P.rdf.ns.cm.problemType],uris2)
            # description
            P.rdf.link([tg],ind,tid_,[P.rdf.ns.cm.description],[tr[4]])
        elif tr[2]==2: # voto
            ind=P.rdf.IC([tg],P.rdf.ns.cm.Vote,tid)
            tid2=tr[5]
            ind2=P.rdf.IC([tg],P.rdf.ns.cm.Problem,tid2)
            P.rdf.link_([tg],ind,tid_,[P.rdf.ns.cm.problem],[ind2])
        elif tr[2]==3: # solução
            ind=P.rdf.IC([tg],P.rdf.ns.cm.Solution,tid)
            P.rdf.link([tg],ind,tid_,[P.rdf.ns.cm.description],[tr[4]])
            tid2=tr[-4]
            ind2=P.rdf.IC([tg],P.rdf.ns.cm.Problem,tid2)
            P.rdf.link([tg],ind,tid_,[P.rdf.ns.cm.problem],[ind2])
        # anota a ID
        uris=[P.rdf.ns.cm.id]
        data=[tid]
        # adiciona horário
        #dt=datetime.datetime(*[int(i) for i in (year,month,day,hour,minute,second)])
        dt=tr[-2]
        uris+=[P.rdf.ns.cm.dateTime]
        data+=[dt]
        # anota language
        uris+=[P.rdf.ns.cm.language]
        data+=tr[1]
        # anota IP
        uris+=[P.rdf.ns.cm.ip]
        data+=tr[-1]
        P.rdf.link([tg],ind,tid_,uris,data)

    tg_=[tg[0]+tg2[0],tg[1]]
    fpath_="{}/{}/".format(fpath,aname)
#    return fpath_, tg_,exp,t,t_
#    return tg_
    P.rdf.writeAll(tg_,aname+"Translate",fpath_,False,1)
    # copia o script que gera este codigo
    if not os.path.isdir(fpath_+"scripts"):
        os.mkdir(fpath_+"scripts")
    #shutil.copy(this_dir+"/../tests/rdfMyFNetwork2.py",fpath+"scripts/")
    shutil.copy(scriptpath,fpath_+"scripts/")
    # copia do base data
    if not os.path.isdir(fpath_+"base"):
        os.mkdir(fpath_+"base")
    P.rdf.writeAll(tg2,aname+"Meta",fpath_,1)
    # faz um README
    # make analysis from graph
    dates=[i for i in tg_[0].query(r"SELECT ?p WHERE {?s cm:dateTime ?p} ORDER BY ASC(?p)")]
    date1=dates[0][0].value
    date2=dates[1][0].value
    #return tg_
    #nicks=queryMe(tg_[0],"SELECT ?s ?o WHERE {?s irc:nick ?o}")

    nprobs=P.utils.countMe2(  tg_[0],"cm:Problem")
    nsols= P.utils.countMe2(  tg_[0], "cm:Solution")
    nvotos=P.utils.countMe2(  tg_[0],"cm:Vote")
    nips=P.utils.countMe(  tg_[0],P.rdf.ns.cm.ip)
    with open(fpath_+"README","w") as f:
        f.write("""This repo delivers RDF data from the Caixa Mágica social participation device.
        triplified around {}, this repo has messages from {} to {}.
It has {} problems, {} solutions, {} votes, all input from {} different IPs (interpreted as different devices or participants).
The linked data is available at rdf/ dir and was
generated by the routine in the script/ directory.""".format(
    created_at,date1,date2,nprobs,nsols,nvotos,nips
    ))
    return tg_

