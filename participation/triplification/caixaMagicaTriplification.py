import percolation as P
def triplificaCaixaMagica(dbname,username,aname="CMData",donated_by="Caixa Mágica Users"):
    con = psycopg2.connect(database=dbname, user=username)
    cur = con.cursor()
    cur.execute('SELECT * FROM ttable')
    trans = cur.fetchall()
    tg=P.rdf.makeBasicGraph([["po","cm"],[P.rdf.ns.po,P.rdf.ns.cm]],"Caixa mágica data triplification metadata")
    tg2=P.rdf.makeBasicGraph([["po","cm"],[P.rdf.ns.po,P.rdf.ns.cm]],"Caixa mágica data triplification")
    ind=P.rdf.IC([tg2],P.rdf.ns.po.Snapshot,
        aname,"Snapshot {}".format(aname))

    P.rdf.link([tg2],ind,"Snapshot {}".format(aname),
                          [P.rdf.ns.po.createdAt,
                          P.rdf.ns.po.triplifiedIn,
                          P.rdf.ns.po.donatedBy,
                          P.rdf.ns.po.availableAt,
                          P.rdf.ns.po.originalFile,
                          P.rdf.ns.po.rdfFile,
                          P.rdf.ns.po.ttlFile,
                          P.rdf.ns.po.discoveryRDFFile,
                          P.rdf.ns.po.discoveryTTLFile,
                          P.rdf.ns.po.acquiredThrough,
                          P.rdf.ns.rdfs.comment,
                          ],
                          [created_at,
                           datetime.datetime.now(),
                           donated_by,
                           "https://github.com/ttm/{}".format(aname),
                           "https://raw.githubusercontent.com/ttm/{}/master/base/{}".format(aname,fname.split("/")[-1]),
                           "https://raw.githubusercontent.com/ttm/{}/master/rdf/{}Translate.owl".format(aname,aname),
                           "https://raw.githubusercontent.com/ttm/{}/master/rdf/{}Translate.ttl".format(aname,aname),
                                "https://raw.githubusercontent.com/ttm/{}/master/rdf/{}Meta.owl".format(aname,aname),
                                "https://raw.githubusercontent.com/ttm/{}/master/rdf/{}Meta.ttl".format(aname,aname),
                           "Database dump",
                                "A linked data expression of the data generated by caixa mágica",
                           ])
    for tr in trans:
        tid=tr[0]
        if tr[-2]:
            ind=P.rdf.IC([tg],P.rdf.ns.cm.DontMind,tid)
            if tr[2] == 3:
                tid2=tr[20] # TTM
                ind2=P.rdf.IC([tg],P.rdf.ns.cm.Problem,tid2)
                P.rdf.link_([tg],imsg,msg,[P.rdf.ns.cm.problem],[ind2])
        elif tr[2]==1: # problema
            ind=P.rdf.IC([tg],P.rdf.ns.cm.Problem,tid)
            if tr[3]=="A": # não tenho
                uris2=[P.rdf.ns.cm.DontHave]
            if tr[3]=="B": # não existe
                uris2=[P.rdf.ns.cm.DontExist]
            if tr[3]=="C": # não gosto
                uris2=[P.rdf.ns.cm.DontLike]
            P.rdf.link_([tg],imsg,msg,[P.rdf.ns.cm.problemType],uris2)
            # description
            P.rdf.link([tg],imsg,msg,[P.rdf.ns.cm.description],[tr[4]])
        elif tr[2]==2: # voto
            ind=P.rdf.IC([tg],P.rdf.ns.cm.Vote,tid)
            tid2=tr[5]
            ind2=P.rdf.IC([tg],P.rdf.ns.cm.Problem,tid2)
            P.rdf.link_([tg],imsg,msg,[P.rdf.ns.cm.problem],[ind2])
        elif tr[2]==3: # solução
            ind=P.rdf.IC([tg],P.rdf.ns.cm.Solution,tid)
            P.rdf.link([tg],imsg,msg,[P.rdf.ns.cm.description],[tr[4]])
            ind2=P.rdf.IC([tg],P.rdf.ns.cm.Problem,tid2)
            P.rdf.link([tg],imsg,msg,[P.rdf.ns.cm.problem],[tr[40]])
        # anota a ID
        uris=[P.rdf.ns.cm.id]
        data=[tid]
        # adiciona horário
        #dt=datetime.datetime(*[int(i) for i in (year,month,day,hour,minute,second)])
        dt=tr[-2]
        uris+=[P.rdf.ns.cm.date]
        data+=[dt]
        # anota language
        uris+=[P.rdf.ns.cm.language]
        data+=tr[1]
        # anota IP
        uris+=[P.rdf.ns.cm.ip]
        data+=tr[-1]
        P.rdf.link([tg],ind,tid,uris,data)


